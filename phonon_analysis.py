from sisl import *
import numpy as np
import matplotlib.pyplot as plt
import os
from .geometry import *
from .tools import *
import xarray
from typing import List, Tuple, Union


def read_phonon_bands(name, path='./phonon', as_dataarray=True, squeeze=True
    ) -> xarray.DataArray:
    """
    Read phonon band structure from name.bands file, which is generated by 
    vibra
    """

    bands_path = os.path.join(path, f'{name}.bands')

    bandsile = get_sile(bands_path)
    bands = bandsile.read_data(as_dataarray=as_dataarray)
    if squeeze:
        bands = bands.squeeze()
    if bands.ticklabels[0] == 'Gamma':
        bands.ticklabels[0] = '$\Gamma$'
    if bands.ticklabels[1] == 'X':
        bands.ticklabels[1] = '$X$'
    return bands


def plot_phonon_bands(name, path='./phonon', Erange=None, figsize=(8, 6),
                      ticks_font=12, label_font=12, title_font=14, border_line_width=2,
                      save=False, save_format='png', dpi=600, ax2=True, **kwargs):
    """
    Plot phonon band structure from name.bands file
    Arguments:
        name: name of the geometry, which is also the name of files
        path: path to read and write files
        Erange: energy range to plot the dispersion
        figsize: figure size
        ticks_font, label_font, title_font, border_line_width: arguments for figure
        save, save_format, dpi: arguments for saving figure
        ax2: plot right axis in frequency (cm^-1) unit or not
    """
    bands = read_phonon_bands(name=name, path=path, as_dataarray=True, squeeze=True)
    if Erange:
        enrg_range = np.array(Erange)
        freq_range = enrg_range*8.066

    ks = bands.k.data
    fig = plt.figure(figsize=figsize)
    ax1 = fig.add_subplot(111)
    if Erange:
        for i in range(bands.shape[1]):
            if np.any(np.logical_and(bands[:, i] > Erange[0]*8.066,
                                     bands[:, i] < Erange[1]*8.066)):
                ax1.plot(ks, bands[:, i]/8.066, color='k', **kwargs)
    else:
        for i in range(bands.shape[1]):
            ax1.plot(ks, bands[:, i]/8.066, color='k', **kwargs)

    ax1.set_xticks(bands.ticks)
    ax1.set_xticklabels(bands.ticklabels, fontsize=ticks_font)
    ax1.set_xlim(bands.ticks)
    ax1.set_ylabel('Energy (meV)', fontsize=label_font)
    fig_title = '{}_PhononDispersion'.format(name)
    ax1.set_title(fig_title+'\n', fontsize=title_font)

    for border in ['left', 'bottom', 'top', 'right']:
        ax1.spines[border].set_linewidth(border_line_width)

    if ax2:
        ax2 = ax1.twinx()
        ax2.set_ylabel('Frequency ($cm^{-1}$)', fontsize=label_font)
        ax2.set_ylim(np.array(ax1.get_ylim())*8.066)

    if Erange:
        ax1.set_ylim(enrg_range)
        if ax2:
            ax2.set_ylim(freq_range)

    if save:
        if Erange:
            fig_name = name + '_PhononDispersion_{}to{}meV'.format(*enrg_range)
        else:
            fig_name = name + '_ProjectedPhononDispersion_full_range'
        fig_path = os.path.join(path, fig_name+'.'+save_format)
        fig.savefig(fig_path, dpi=dpi)


def write_GammaPhonon_xsf(name, geom, first_band: int, last_band: int,
                          path='./phonon', num_of_cells=1):
    """
    Write xsf files to visualize phonon modes at Gamma point
    Argument:
        first_band: first band to write
        last_band: last band to write
        path: path to read and write files
        num_of_cells: number of unit cells to write
    """
    vec_path = os.path.join(path, f'{name}.vectors')
    with open(vec_path, 'r') as vf:
        for l in range(2):
            vf.readline()
        for b in range(first_band-1):
            for l in range(2+2*(geom.na+1)):
                vf.readline()
        for b in np.arange(first_band, last_band+1, 1):
            band = int(vf.readline()[-6:].strip())  # label of band
            freq = float(vf.readline()[14:].strip())  # cm-1
            enrg = freq/8.066
            vf.readline()  # real part
            vector = np.empty((geom.na, 3))
            for i in range(geom.na):
                v = vf.readline().strip().split()
                vec = np.array([float(a) for a in v])
                vector[i, :] = vec
            for i in range(geom.na+1):
                vf.readline()

            with open(os.path.join(path,
                                   '{}_GammaMode_{}_{:.2f}meV.xsf'.format(name, band, enrg)), 'w') as xsf:
                xsf.write("# ---- XSF block for ---- \n")
                xsf.write(f"# mode = {band} (Gamma)\n")
                xsf.write(f"# frequency = {freq} cm-1\n")
                xsf.write(f"# energy = {enrg} meV\n")
                xsf.write('CRYSTAL\n')
                xsf.write('PRIMVEC\n')
                for i in range(3):
                    xsf.write('  {:.8f}  {:.8f}  {:.8f}\n'.format(
                        *geom.cell[i, :]))
                xsf.write('CONVVEC\n')
                for i in range(3):
                    xsf.write('  {:.8f}  {:.8f}  {:.8f}\n'.format(
                        *geom.cell[i, :]))
                xsf.write('PRIMCOORD\n')
                xsf.write('  {}  {}\n'.format(geom.na, num_of_cells))

                for i, a, _ in geom.iter_species():
                    xsf.write('  {}  {:.8f}  {:.8f}  {:.8f}  {:.8f}  {:.8f}  {:.8f}\n'.format(
                        a.Z, *geom.xyz[i, :], *vector[i, :]))



def read_phonon_vectors(geom, name, first_band: int, last_band: int,
    path = './phonon') -> np.ndarray:
    """
    Read the phonon eigenvectors from name.vectors file. By default read the 
    vectors for all k points and selected bands.
    Arguments:
        first_band: first band to read
        last_band: last band to read
    """
    vectors = []
    vec_path = os.path.join(path, f'{name}.vectors')
    kpts = []
    enrgs = []
    emp = 0
    with open(vec_path, 'r') as vf:
        while emp < 3:
            line = vf.readline()
            if len(line) == 0:
                emp += 1
            if 'k' in line:
                vectors_k = []
                enrg_k = []
                emp = 0
                kline = line.strip().split()[-3:]
                kpts.append([float(i) for i in kline])
                # skip the unwanted vectors
                for b in range(first_band-1):
                    for l in range(2+2*(geom.na+1)):
                        vf.readline()
                # now read the bands that we want
                for b in np.arange(first_band, last_band+1):
                    band = int(vf.readline()[-6:].strip()) # label of band
                    freq = float(vf.readline().strip().split()[-1]) # cm-1
                    enrg = freq/8.066
                    enrg_k.append(enrg)
                    vf.readline() # Eigenmode (real part)
                    vector_b = np.empty((geom.na, 3), dtype=complex)
                    for i in range(geom.na):
                        v = vf.readline().strip().split()
                        real = np.array([float(a) for a in v], dtype=complex)
                        vector_b[i] = real
                    vf.readline() # Eigenmode (imaginary part)
                    for i in range(geom.na):
                        v = vf.readline().strip().split()
                        imag = 1j*np.array([float(a) for a in v])
                        vector_b[i,:] += imag
                    vectors_k.append(vector_b)
                enrgs.append(enrg_k)
                vectors.append(vectors_k)
    kpts = np.array(kpts)
    enrgs = np.array(enrgs)
    vectors = np.array(vectors)
    return kpts, enrgs, vectors



def fat_phonon_bands(geom, name, first_band: int, last_band: int,
    path='./phonon', Erange=None, figsize=(8, 6),
    project_list: Union[List, Tuple, np.ndarray]=None, label: str=None,
    line_opacity=0.0, marker_size=50, cmap='inferno_r',
    ticks_font=12, label_font=12, title_font=14, border_line_width=2,
    save=False, save_format='png', dpi=600, ax2=True, **kwargs):
    """
    Plot the fat phonon dispersion relation projecting on selected atoms
    Arguments:
        first_band: first band to project
        last_band: last band to project
        path: path to load and write files
        Erange: energy range to plot the dispersion, in meV unit
        figsize: figure size
        project_list: list of atoms to be projected on
        label: label to be shown in the title of the figure
        line_opacity: opacity of the original dispersion lines
        marker_size: size of the markers of fat bands
        cmap: color map
        ticks_font, label_font, title_font, border_line_width: arguments for figure
        save: save figures or not
        save_format: format of the figuer to be saved, usually png, or pdf
        dpi: dots per inch
        ax2: plot vertical axis at right or no, in frequency units, while the default
            left axis is in energy meV unit
    """


    bands = read_phonon_bands(name=name, path=path, as_dataarray=True, squeeze=True)

    # all the phonon vectors
    ph_kpts, ph_enrgs, ph_vectors = read_phonon_vectors(geom=geom, name=name, path=path,
                                    first_band=first_band, last_band=last_band)
    # Convert ph_kpts to one dimension
    kpts = ph_kpts[:,0]
    # phonon vectors modulus of all atoms
    ph_mod_tot = np.linalg.norm(ph_vectors[:,:,:,:],axis=-1).sum(-1)
    # phonon vectors modulus of projected atoms
    ph_mod_proj = np.linalg.norm(ph_vectors[:,:,project_list,:],axis=-1).sum(-1)
    ph_wt_proj = ph_mod_proj/ph_mod_tot
    wt_min, wt_max = ph_wt_proj.min(), ph_wt_proj.max()

    if Erange:
        enrg_range = np.array(Erange)
        freq_range = enrg_range*8.066

    fig = plt.figure(figsize=figsize)
    ax1 = fig.add_subplot(111)
    if Erange:
        for i in range(last_band-first_band+1):
            if np.any(np.logical_and(ph_enrgs[:,i] > Erange[0],
                                     ph_enrgs[:,i] < Erange[1])):
                ax1.plot(kpts, ph_enrgs[:,i], color='k',
                    alpha=line_opacity, **kwargs)
                proj_pd = ax1.scatter(kpts, ph_enrgs[:,i],
                    s=marker_size,
                    c=ph_wt_proj[:,i], cmap=cmap)

    else:
        for i in range(bands.shape[1]):
            ax1.plot(kpts, ph_enrgs[:,i], color='k',
                    alpha=line_opacity, **kwargs)
            ax1.scatter(kpts, ph_enrgs[:,i], s=marker_size,
                c=ph_wt_proj[:,i], cmap=cmap)

    ax1.set_xticks(bands.ticks)
    ax1.set_xticklabels(bands.ticklabels, fontsize=ticks_font)
    ax1.set_xlim(bands.ticks)
    proj_pd.set_clim(0.,1.)
    ax1.set_ylabel('Energy (meV)', fontsize=label_font)
    fig_title = 'Projected Phonon Dispersion for {}'.format(label)
    ax1.set_title(fig_title+'\n', fontsize=title_font)
    
    plt.colorbar(proj_pd, ax=ax1, shrink=0.8, location='right', pad=0.15)

    for border in ['left', 'bottom', 'top', 'right']:
        ax1.spines[border].set_linewidth(border_line_width)

    if ax2:
        ax2 = ax1.twinx()
        ax2.set_ylabel('Frequency ($cm^{-1}$)', fontsize=label_font)
        ax2.set_ylim(freq_range)

    if Erange:
        ax1.set_ylim(enrg_range)

    if save:
        if Erange:
            fig_name = name + '_ProjectedPhononDispersion-{}_{}to{}meV'.format(
                label, *enrg_range)
        else:
            fig_name = name + '_ProjectedPhononDispersion_full_range'
        fig_path = os.path.join(path, fig_name+'.'+save_format)
        fig.savefig(fig_path, dpi=dpi)


